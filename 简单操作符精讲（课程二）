#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//int main()
//{
//	int a = 10;										//打印    之后
//	printf("%d\n", a++);//后置加加   先使用  后加加    10      11
//	printf("%d\n", ++a);//前置加加   先加加  后使用    12      12
//	return 0;
//}

//int main()
//{
//	int a = (int)3.14;
//	printf("%d\n", a);       //3
//	return 0; 
//}

//void test1(int arr[])
//{
//	printf("%d\n", sizeof(arr));//     4
//}
//void test2(char ch[])
//{
//	printf("%d\n", sizeof(ch));//      4
//}						//					    传过去的是首字符的地址（指针的大小）当前平台默认4个字节
//int main()
//{
//	int arr[10] = { 0 };
//	char ch[10] = { 0 };
//	printf("%d\n", sizeof(arr));//     40
//	printf("%d\n", sizeof(ch));//      10
//	test1(arr);
//	test2(ch);
//	return 0;
//}

//  逻辑操作符
//int main()
//{
//	int a = 3;
//	int b = 5;
//	int c = a && b;
//	printf("%d\n", c);//         &  按位与比较的是二进制      &&    比较的是数字本身的真假
//	return 0;
//}

//int main()
//{
//	int i = 0, a = 0, b = 2, c = 3, d = 4;
//	i = a++ && ++b && d++;//   逻辑与操作符			如果左边为假   右边将不再算（ b d 没参与计算）
//	printf("a=%d\nb=%d\nc=%d\nd=%d\n", a, b, c, d);
//	return 0;
//}

//int main()//      三目操作符     
//{
//	int a = 0;
//	int b = 0;
//	scanf_s("%d%d", &a, &b);
//	int max = (a > b ? a : b);
//	printf("%d\n", max);
//	return 0;
//}

//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = (a = b + 1, b = a + 1, a + b);//   逗号表达式( 从左到右以此计算  最后一个表达式结果为整个表达式结果  )
//	printf("%d\n", c);
//	return 0;
//}

////          '.'       '->'   操作符使用
//struct stu
//{
//	char name[20];
//	int age;
//	char id[20];
//};
//int main()
//{
//	int a = 0;
//	//使用struct stu这个类型创建了一个学生对象s1，并初始化.
//	struct stu s1 = { "张三",20,"202002010092" };
//	struct stu* pa = &s1;
//	printf("%s\n", (*pa).name);
//	printf("%d\n", s1.age);
//	printf("%s\n", s1.name);
//	printf("%s\n", s1.id);
//
//	printf("%s\n", pa->name);
//	printf("%s\n", pa->id);
//	printf("%d\n", pa->age);
//	return 0;
//}

//							隐式类型转换
//int main()
//{
//	printf("%d\n", sizeof(int));    //  4
//	printf("%d\n", sizeof(char));   //  1 
//	printf("%d\n", sizeof(double)); //  8
//
//	char a = 3;
//	//  3这个整形有4个字节32个比特位  即   00000000000000000000000000000011
//	//  char类型中只有8个比特位								       00000011
//	char b = 127;
//	//									   00000000000000000000000001111111
//	//															   01111111
//	char c = a + b;
//	// a和b相加       **进行隐形提升**（按照变量类型的符号位进行提升0/1）
//	//															  c=10000010
//	//								 c存储  11111111111111111111111110000010 - 补码
//	//										11111111111111111111111110000001 - 反码
//	//										10000000000000000000000001111110 - 原码    -126
//	printf("%d\n", c);
//	return 0;
//}

//int main()
//{
//	char a = 0xb6;//   10110110
//	short b = 0xb600;
//	int c = 0xb60000;
//	if (a == 0xb6)
//		printf("a");//整形提升后不一样了
//	if (b == 0xb600)
//		printf("b");
//	if (c == 0xb60000)
//		printf("c");
//	return 0;
//}

//int main()
//{
//	char a = 1;
//	printf("%u\n", sizeof(char));
//	printf("%u\n", sizeof(a));
//	printf("%u\n", sizeof(+a));
//	printf("%u\n", sizeof(!a));//    1    1    4    1(加   表示经过计算   经过整型提升)
//	return 0;
//}

//优先级选择
//int main()
//{
//	int a = 3;
//	int b = 4;
//	int c = a + b * 3;
//	printf("%d\n", c);
//	return 0;
//}

//int fun()
//{
//	static int count = 1;
//	return ++count;
//}
//int main()
//{
//	int answer = 0;
//	answer = fun() + fun() * fun();     //   14    计算路径不唯一  错误❌
//	printf("%d\n", answer);				//			在unix中计算结果不同
//	return 0;
//}
//int main()
//{
//	int i = 1;
//	int a = (++i) + (++i) + (++i);  //12
//	printf("%d\n", a);
//	return 0;
//}
