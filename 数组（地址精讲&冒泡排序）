#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//int main()									//  二维数组下标访问
//{
//	int arr[3][4] = { {1,2,3},{4,5} };
//	int i = 0;
//	int j = 0;
//	for (i = 0;i < 3;i++)
//	{
//		for (j = 0;j < 4;j++)
//		{
//			printf("%d", arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}

//int main()
//{
//	int j = 0;
//	int i = 0;
//	int arr[3][4] = { {1,2,3},{4,5} };
//	for (i = 0;i < 3;i++)
//	{
//		for (j = 0;j < 4;j++)
//		{
//			printf("%p\n", &arr[i][j]);
//		}
//	}
//	return 0;
//}

//void bs(int arr[], int sz)
//{
//	//确定冒泡排序的趟数
//	int i = 0;
//	int flag = 0;
//	for (i = 0;i < sz;i++)
//	{
//		//每一趟冒泡排序
//		int j = 0;
//		for (j = 0;j < sz - 1 - i;j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//				flag = 0;
//			}
//		}
//		if (flag == 1)
//		{
//			break;
//		}
//	}
//}
//int main()
//{
//	int arr[] = { 10,9,8,7,6,5,4,3,2,1 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	bs(arr, sz);//冒泡排序函数
//			    //arr数组，我们对数组进行传参，实际上传递过去的是数组arr首元素的地址
//	for (i = 0;i < sz;i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}

//int main()					////		数组名首元素的地址
//{
//	int arr[] = { 1,2,3,4,5 };
//	printf("%p\n", arr);
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr);//数组的地址（与上两个不等价    较大）
//	printf("%d\n", *arr);
//	return 0;
//}
//两个例外：1.sizeof（数组名）-数组名表示整个数组，sizeof（数组名）计算的是整个数组大小，单位是字节。
//			2.&数组名，数组名代表整个数组，&数组名，取出的是整个数组的地址。
