#include<stdio.h>
//int main()
//{
//	printf("%d\n", sizeof(char));
//	printf("%d\n", sizeof(short));
//	printf("%d\n", sizeof(int));
//	printf("%d\n", sizeof(long));
//	printf("%d\n", sizeof(long long));
//	printf("%d\n", sizeof(float));
//	printf("%d\n", sizeof(double));
//	return 0;
//}




//int main()
//{
//	printf("hello world");
//		return 0;
//}




//int main()
//{
//	char ch = 'A';
//	printf("%c\n", ch);
//	return 0;
//}



//int main()
//{
//	float f = 5.0;
//	printf("%f\n", f);
//	return 0;
//}


//int main()
//{
//	double d = 3.14;
//	printf("%lf\n", d);
//	return 0;
//}

//int main()
//{
//	int sum1 = 0;
//	int sum2 = 0;
//	int sum = 0;
//	scanf("%d%d", &sum1, &sum2);
//	sum = sum1 + sum2;
//	printf("%d\n", sum);
//	return 0;
//}??????????????????

int global = 2020;
int main()
{
	printf("%d\n", global);
	getchar();
	return 0;
}

%d 十进制有符号整数

%u 十进制无符号整数

%f 浮点数

%s 字符串

%c 单个字符

%p 指针的值

%e 指数形式的浮点数

%x, %X 无符号以十六进制表示的整数

%o 无符号以八进制表示的整数

%g 把输出的值按照%e或者%f类型中输出长度较小的方式输出

%p 输出地址符

%lu 32位无符号整数

%llu 64位无符号整数

#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
//int main()
//{
//	int sum1 = 0;             //库函数
//	int sum2 = 0;
//	int sum = 0;
//	scanf("%d%d", &sum1, &sum2);
//	sum = sum1 + sum2;
//	printf("sum=%d\n", sum);
//	return 0;
//}
//int Add(int x, int y)    加法函数（自定义函数）
//{
//	int z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 3;
//	int b = 4;
//	int sum = 0;
//	sum = Add(a, b);
//	printf("sum=%d\n", sum);
//	return 0;
//}

//int main()         
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,0};
//	printf("%d\n", arr[2]);
//
//	return 0;
//}

//int main ()       数组的利用
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };
//	while(i<10)
//	{
//		printf("%d\n", arr[i]);
//		i++;
//	}
//
//	return 0;
//}

//int main()    移位操作符
//{
//	int a = 1;
//	int b = a << 1;
//	int c = a << 2;
//	int d = a << 3;
//	printf("%d\n", b);
//	printf("%d\n", c);
//	printf("%d\n", d);
//	return 0;
//}

//int main()//(二进制）位操作   &按位与  |按位或 ^按位异或(相同则为0)
//{
//	int a = 3;
//	int b = 5;
//	int c = a & b;
//	int d = a | b;
//	int e = a ^ b;
//	printf("%d\n", c);
//	printf("%d\n", d);
//	printf("%d\n", e);
//	return 0;
//}//                        3:011  5:101


//int main()
//{
//	int a = 1;
//	printf("%d\n", a);
//	printf("%d\n", !a);
//	return 0;
//}            !逻辑反操作     真假互换

//i/*nt main()
//{
//	int a = 10;
//	printf("%d\n", sizeof(a));
//	printf("%d\n", sizeof(int));        sizeof   所占空间的大小
//	return 0;
//}*/
//
//int main()
//{
//	int arr[10] = { 0 };
//	printf("%d\n", sizeof(arr));    =10乘以每个数组的大小4
//	return 0;
//}
