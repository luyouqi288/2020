#define _CRT_SECURE_NO_WARNINGS 1
#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void initboard(char board[ROW][EOL], int row, int eol)
{
	int i = 0;
	int j = 0;
	for (i = 0;i < row;i++)
	{
		for (j = 0;j < eol;j++)
		{
			board[i][j] = ' ';
		}
	}
}
void display(char board[ROW][EOL], int row, int eol)
{
	int q = 0;
	int p = 0;
	int i = 0;
	for (q = 0;q < row;q++)
	{
		for (p = 0;p < eol;p++)
		{
			//1.打印一行的数据	
			printf(" %c ", board[q][p]);
			if (p < eol - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		//2.打印分割行
		if (q < row - 1)
		{
			for (i = 0;i < eol;i++)
			{
				printf("---");
				if (i < eol - 1)
				{
					printf("|");
				}
			}
			printf("\n");
		}
	}
}
void player(char board[ROW][EOL], int row, int eol)
{
	int x = 0;
	int y = 0;
	printf("玩家走:>\n");
	while (1)
	{
		printf("请输入要下的坐标:>");
		scanf_s("%d%d", &x, &y);
		//判断是否符合实际
		if ((x >= 1 && x <= row) && (y >= 1 && y <= eol))
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标被占用\n");
			}
		}
		else
		{
			printf("坐标非法，请重新输入:>");
		}
	}
}
void npc(char board[ROW][EOL], int row, int eol)
{
	int x = 0;
	int y = 0;
	printf("电脑走:>\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % eol;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}
int isfull(char board[ROW][EOL], int row, int eol)
{
	int i = 0;
	int j = 0;
	for (i = 0;i <= row;i++)
	{
		for (j = 0;j <= eol;j++)
		{
			if (board[i][j] == ' ')
				return 0;//没满
		}
	}
	return 1;
}

int iswin(char board[ROW][EOL], int row, int eol)
{
	int i = 0;
	for (i = 0;i < row;i++)//横三行
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
		{
			if (board[i][0] == '*')
			{
				return 1;
			}
			else
			{
				return 2;
			}
		}
	}
}
	for (i = 0;i < eol;i++)//竖三列
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
		{
			if (board[0][i] == '*')
			{
				return 1;
			}
			else
			{
				return 2;
			}
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')//对角线
	{
		if (board[0][0] == '*')
		{
			return 1;
		}
		else
		{
			return 2;
		}
	}
	if (board[0][3] == board[1][1] && board[1][1] == board[3][0] && board[1][1] != ' ')
	{
		if (board[0][3] == '*')
		{
			return 1;
		}
		else
		{
			return 2;
		}
	//判断是否平局
	if (1 == isfull(board, ROW, EOL))
	{
		return 3;
	}
	return 4;
}
