#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//												简单操作符精讲

//int main()
//{								
	//int a = 5 / 2;				//2
	//int b = 5 % 2;				//1
	//printf("%d\n", a);						//商2余1
	//printf("%d\n", b);
	//double a = 5 / 2.0;
	//printf("%lf\n", a);				//2.500000
//	return 0;

//}
//int main()
//{
//	int a = 16;//(   010000  )
//	int b = a >> 1;
//	int c = a << 1;
//	printf("%d\n", b);//     8     (001000)//补的是符号位
//	printf("%d\n", c);//     32    (100000)//算数移位
//	return 0;
//}

//int main()
//{
//	int a = -1;
//	int b = a >> 1;
//	int c = a << 1;
//	//整数的二进制表示有：原码，反码，补码
//	//储存到内存的是补码
//	//10000000000000000000000000000001 - 原码
//	//11111111111111111111111111111110 - 反码
//	//11111111111111111111111111111111 - 补码
//	//	   b  	=1111111111111111111111111 - 补原符号位1
//	printf("%d\n%d\n", b, c);      //		-1     -2
//	return 0;
//}

//						位操作符
//int main()//								补码之间
//{
//	        //			&按位与		 |按位或			^按位异或
//	int a = 3;
//	int b = 5;
//	//011     （32位未补全）
//    //101
//	int c = a & b;
//	printf("%d\n", c);//			1		(有0即0 全1才1)
//	int d = a | b;
//	printf("%d\n", d);//            7		(有1即1 全0才0)
//	int e = a ^ b;
//	printf("%d\n", e);//			6		(相同为0 相异为1)
//	return 0;
//}

//int main()
//{
//	int a = 3;
//	int b = 5;
//	//						//第一种
//	//int tmp = 0;
//	//tmp = a;
//	//a = b;
//	//b = tmp;
//	//printf("%d %d", a, b);
//	//						//第二种
//	//a = a + b;
//	//b = a - b;
//	//a = a - b;
//	//printf("%d  %d", a, b);
//	//						//第三种
//	//a = a ^ b;
//	//b = a ^ b;
//	//a = a ^ b;
//	//printf("%d  %d", a, b);
//	return 0;
//}

//int main()
//{
//	int sum = 0;
//	int count = 0;
//	scanf_s("%d", &sum);
//	//统计num中的补码中	有几个1
//	while (sum)
//	{
//		if (sum % 2 == 1)
//			count++;
//		sum = sum / 2;
//	}
//	printf("%d\n", count);
//	return 0;
//}
//int main()
//{
//	int sum = 0;
//	scanf_s("%d", &sum);
//	int count = 0;
//	int i = 0;
//	for (i = 0;i < 32;i++)
//	{
//		if (1 == (1 & (sum >> i)))
//			count++;
//	}
//	printf("%d\n", count);
//	return 0;
//}
//int main()
//{
//	int sum = 0;
//	scanf_s("%d", &sum);
//	int i = 0;
//	int count = 0;
//	while (sum)
//	{
//		count++;
//		sum = sum & (sum - 1);
//	}
//	printf("%d\n", count);
//	return 0;
//}

//int main()
//{
//	int a = 0;
//	a = a + 2;
//	a += 2;//    复合操作符
//	printf("%d\n", !a);//			! 逻辑反操作（不常这样用）
//	if (!a)
//	{
//		printf("hehe\n");//			a 为假打印呵呵
//	}
//	printf("%p", &a);
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	int* p = &a;//  取地址操作符
//	*p = 20;    //解引用操作符
//	printf("%d\n", a);             //20
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	char c = 'r';
//	char* p = &c;
//	int arr[10] = { 0 };
//	printf("%d\n", sizeof(a));			//4
//	printf("%d\n", sizeof(int));			//4
//
//	printf("%d\n", sizeof(c));			//1
//	printf("%d\n", sizeof(char));			//1
//
//	printf("%d\n", sizeof(p));				//4
//	printf("%d\n", sizeof(char*));				//4
//
//	printf("%d\n", sizeof(arr));		//40
//	printf("%d\n", sizeof(int[10]));		//40
//	return 0;
//}

//int main()
//{
//	short s = 0;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 5));//		2
//	printf("%d\n", sizeof(short));//		2
//
//	printf("%d\n", s);				  //        0	
//	return 0;
//}

//int main()
//{
//	int a = 0;
//	printf("%d\n", ~a);//			-1
//	//二进制按位取反（~）
//	//a:       00000000000000000
//	//a补码:   00000000000000000
//	//~a补码： 11111111111111111
//	//~a反码:  11111111111111110
//	//~a原码:  10000000000000001   --  ( -1 )  符号位不变
//	return 0;
//}
