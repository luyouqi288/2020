#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//   指针运算    指针+-整数   指针-指针   指针的关系运算

//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* p = arr;
//	for (i = 0;i < sz;i++)
//	{
//		printf("%d ", *p);
//		p = p + 1;		//p++	;
//	}
//	return 0;
//}

//#define N_VALUES 5
//float values[N_VALUES];
//float* vp = NULL;
//int main()
//{
//	for (vp = &values[0];vp < &values[N_VALUES];)
//	{
//		*vp++ = 0;		//先将 *vp地址处的值改变再  后置加加
//	}
//	return 0;
//}

//int main()
//{
//	char ch[5] = { 0 };
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	//int a = (&arr[9] - &ch[0]);				//无法计算
//	printf("%d\n", &arr[9] - &arr[0]);		//中间的元素个数
//	return 0;
//}

//#include<string.h>
//int my_strlen(char* arr1)
//{
//	char* start = arr1;
//	char* end = arr1;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//{
//	//strlen--求字符串长度
//	//递归 - 模拟实现了strlen - 计数器的方法一，递归方法二
//	char arr[] = "bit";
//	int len = strlen(arr);
//	int lan = my_strlen(arr);
//	printf("%d\n", lan);
//	printf("%d\n", len);
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0;i < 10;i++)
//	{
//		printf("%p === %p\n",i+p,&arr[i]);
//	}
//	printf("\n\n");
//	for (i = 0;i < 10;i++)
//	{
//		*(p + i) = i;
//	}
//	for (i = 0;i < 10;i++)
//	{
//		printf("%d ", arr[i]);//		*(p+i);也可以
//	}
//	return 0;
//}

// 二级指针
//int main()
//{
//	int a = 10;
//	int* p = &a;
//	int** pp = &p;//			pp就是二级指针
//	printf("%d====%d\n", a, **pp);
//	return 0;
//}

//int main()							//指针数组--（数组）   数组指针--（指针）
//{									//    存放指针
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int* pa = &a;
//	int* pb = &b;
//	int* pc = &c;
//	int* arr[3] = { pa,pb,pc };
//	int i = 0;
//	for (i = 0;i < 3;i++)
//	{
//		printf("%p ", arr[i]);
//		printf("%d\n", *(arr[i]));
//	}
//	return 0;
//}
